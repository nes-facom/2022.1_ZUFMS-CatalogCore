import { readFileSync } from 'fs'

const schema = JSON.parse(readFileSync('docs/zufmscore.schema.json').toString('utf-8'))
const schemaWithTermclass = JSON.parse(readFileSync('web/src/assets/zufmscore.schema.json').toString('utf-8'))

const omitSection = (value) => {
    const { '$zufmscore:section': section, ...data } = value

    return data
}

const orderedProperties = [
    'artificial:section',
    'occurrenceID',
    'otherCatalogNumbers',
    'recordNumber',
    'associatedOccurrences',
    'relationshipOfResource',
    'taxonRank',
    'scientificName',
    'taxonomicStatus',
    'originalNameUsage',
    'vernacularName',
    'typeStatus',
    'identifiedBy',
    'dateIdentified',
    'identificationQualifier',
    'recordedBy',
    'day',
    'month',
    'year',
    'eventDate',
    'eventTime',
    'fieldNumber',
    'samplingProtocol',
    'habitat',
    'eventRemarks',
    'fieldNotes',
    'country',
    'stateProvince',
    'county',
    'municipality',
    'locality',
    'decimalLatitude',
    'decimalLongitude',
    'coordinatePrecision',
    'geodeticDatum',
    'footprintWKT',
    'verbatimLocality',
    'minimumElevationInMeters',
    'maximumElevationInMeters',
    'waterBody',
    'minimumDepthInMeters',
    'maximumDepthInMeters',
    'locationRemarks',
    'individualCount',
    'sex',
    'lifeStage',
    'reproductiveCondition',
    'measurementRemarks',
    'behavior',
    'occurrenceRemarks',
    'establishmentMeans',
    'preparations',
    'associatedMedia',
    'associatedReferences',
    'dcterms:bibliographicCitation',
    'datasetName',
    'previousIdentifications',
    'informationWithheld',
    'disposition',
    'artificial:shippingGuide',
    'dcterms:modified',
    'artificial:flaskLocation',
    'artificial:shelfLocation',
    'nomenclaturalCode',
    'nameAccordingTo',
    'basisOfRecord',
    'collectionCode',
    'institutionCode',
    'verbatimEventDate',
    'catalogNumber',
    'continent',
    'countryCode',
    'verbatimLatitude',
    'verbatimLongitude',
    'scientificNameAuthorship',
    'subgenus',
    'genus',
    'specificEpithet',
    'infraspecificEpithet',
    'artificial:subtribe',
    'artificial:tribe',
    'artificial:subfamily',
    'family',
    'artificial:superfamily',
    'artificial:superorder',
    'order',
    'artificial:suborder',
    'artificial:infraorder',
    'class',
    'artificial:subclass',
    'phylum',
    'artificial:subphylum',
    'kingdom',
    'acceptedNameUsage'
]

console.log(JSON.stringify({
    ...schema,
    properties: orderedProperties.reduce((acc, key) => ({
        ...acc,
        [key]: {
            ...omitSection(schema.properties[key]),
            ...(schemaWithTermclass.properties[key]?.['$zufmscore:termclass'] ? { '$zufmscore:termclass': schemaWithTermclass.properties[key]?.['$zufmscore:termclass'] } : {}),
        }
    }), {})
}, undefined, 2))