/* tslint:disable */
/* eslint-disable */
/**
 * Coleção Zoológica Online ZUFMS
 * Coleção Zoológica – Incremento e movimentação do acervo  ## Visão geral 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: suporte.agetic@ufms.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccessTokenResponse,
    AccessTokenResponseFromJSON,
    AccessTokenResponseToJSON,
    AuthRequest,
    AuthRequestFromJSON,
    AuthRequestToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    RequestCodeRequest,
    RequestCodeRequestFromJSON,
    RequestCodeRequestToJSON,
    RevokeAccessTokenRequest,
    RevokeAccessTokenRequestFromJSON,
    RevokeAccessTokenRequestToJSON,
} from '../models';

export interface AuthOperationRequest {
    authRequest?: AuthRequest;
}

export interface RequestAuthCodeRequest {
    requestCodeRequest?: RequestCodeRequest;
}

export interface RevokeTokenRequest {
    revokeAccessTokenRequest?: RevokeAccessTokenRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Realizar autenticação
     */
    async authRaw(requestParameters: AuthOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRequestToJSON(requestParameters.authRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     * Realizar autenticação
     */
    async auth(requestParameters: AuthOperationRequest = {}, initOverrides?: RequestInit): Promise<AccessTokenResponse> {
        const response = await this.authRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Solicitar um código de autenticação de um usuário
     */
    async requestAuthCodeRaw(requestParameters: RequestAuthCodeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/requestcode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCodeRequestToJSON(requestParameters.requestCodeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     * Solicitar um código de autenticação de um usuário
     */
    async requestAuthCode(requestParameters: RequestAuthCodeRequest = {}, initOverrides?: RequestInit): Promise<AccessTokenResponse> {
        const response = await this.requestAuthCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revogar um token de acesso
     */
    async revokeTokenRaw(requestParameters: RevokeTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("access_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeAccessTokenRequestToJSON(requestParameters.revokeAccessTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Revogar um token de acesso
     */
    async revokeToken(requestParameters: RevokeTokenRequest = {}, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.revokeTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
